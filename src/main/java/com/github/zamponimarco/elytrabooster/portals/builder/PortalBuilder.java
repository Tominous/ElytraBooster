package com.github.zamponimarco.elytrabooster.portals.builder;

import java.util.ArrayList;
import java.util.List;

import org.bukkit.Location;
import org.bukkit.World;
import org.bukkit.configuration.ConfigurationSection;

import com.github.zamponimarco.elytrabooster.core.ElytraBooster;
import com.github.zamponimarco.elytrabooster.manager.PortalManager;
import com.github.zamponimarco.elytrabooster.portals.AbstractPortal;
import com.github.zamponimarco.elytrabooster.portals.CirclePortal;
import com.github.zamponimarco.elytrabooster.portals.SquarePortal;

/**
 * Manages the creation of portals from a ConfigurationSection of portals.yml
 * 
 * @author Marco
 *
 */
public class PortalBuilder {

	// TODO yeah, make some checks
	/**
	 * Creates a portal from a configuration section
	 * 
	 * @param plugin
	 * @param portalManager
	 * @param portalConfiguration
	 * @return the portal generated by the config section
	 */
	public static AbstractPortal buildPortal(ElytraBooster plugin, PortalManager portalManager,
			ConfigurationSection portalConfiguration) {
		
		// Portal id
		String id = portalConfiguration.getName();
		
		// IsBlockOutline
		boolean isBlock = portalConfiguration.getBoolean("isBlockOutline");
		
		// Portal center location
		World world = plugin.getServer().getWorld(portalConfiguration.getString("world"));
		double x = portalConfiguration.getDouble("x");
		double y = portalConfiguration.getDouble("y");
		double z = portalConfiguration.getDouble("z");
		Location center = new Location(world, x, y, z);
		
		// Portal axis
		char axis = portalConfiguration.getString("axis").charAt(0);
		
		// Portal initial velocity
		double initialVelocity = portalConfiguration.getDouble("initialVelocity");
		
		// Portal final velocity
		double finalVelocity = portalConfiguration.getDouble("finalVelocity");
		
		// Portal boost duration
		int boostDuration = portalConfiguration.getInt("boostDuration");
		
		// Portal Outline type
		String outlineType = portalConfiguration.getString("outlineType");
		
		// Portal shape
		String shape = portalConfiguration.getString("shape");
		
		// Portal outline measures
		String measures = portalConfiguration.getString("measures");
		
		// Union of portals
		List<String> portalsUnionString = portalConfiguration.getStringList("portalsUnion");
		List<AbstractPortal> portalsUnion = new ArrayList<AbstractPortal>();
		for (int i = 0; i < portalsUnionString.size(); i++) {
			String portalString = portalsUnionString.get(i);
			String[] portalArray = portalString.split(":");
			String subPortalId = id + "_" + i;
			AbstractPortal portal = buildPortal(plugin, subPortalId, isBlock,
					new Location(world, Double.valueOf(portalArray[1]), Double.valueOf(portalArray[2]),
							Double.valueOf(portalArray[3])),
					axis, initialVelocity, finalVelocity, boostDuration, outlineType, new ArrayList<AbstractPortal>(),
					portalArray[0], portalArray[4], true);
			portalsUnion.add(portal);
			portalManager.setPortal(subPortalId, portal);
		}
		
		// Build portal
		return buildPortal(plugin, id, isBlock, center, axis, initialVelocity, finalVelocity, boostDuration,
				outlineType, portalsUnion, shape, measures, false);
	}

	private static AbstractPortal buildPortal(ElytraBooster plugin, String id, boolean isBlock, Location center,
			char axis, double initialVelocity, double finalVelocity, int boostDuration, String outlineType,
			List<AbstractPortal> portalsUnion, String shape, String measures, boolean hasSuperior) {
		switch (shape) {
		case "circle":
			return new CirclePortal(plugin, id, isBlock, center, axis, initialVelocity, finalVelocity, boostDuration,
					outlineType, portalsUnion, hasSuperior, Double.valueOf(measures));
		case "square":
			return new SquarePortal(plugin, id, isBlock, center, axis, initialVelocity, finalVelocity, boostDuration,
					outlineType, portalsUnion, hasSuperior, Double.valueOf(measures));
		}
		throw new NullPointerException("Portal creation failed, id: " + id);
	}
}
