package com.github.zamponimarco.elytrabooster.portals.builder;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.IntStream;

import org.bukkit.Location;
import org.bukkit.World;
import org.bukkit.configuration.ConfigurationSection;

import com.github.zamponimarco.elytrabooster.core.ElytraBooster;
import com.github.zamponimarco.elytrabooster.manager.PortalManager;
import com.github.zamponimarco.elytrabooster.portals.AbstractPortal;
import com.github.zamponimarco.elytrabooster.portals.CirclePortal;
import com.github.zamponimarco.elytrabooster.portals.RectanglePortal;
import com.github.zamponimarco.elytrabooster.portals.TrianglePortal;
import com.github.zamponimarco.elytrabooster.portals.UnionPortal;

/**
 * Manages the creation of portals from a ConfigurationSection of portals.yml
 * 
 * @author Marco
 *
 */
public class PortalBuilder {

	// TODO yeah, make some checks
	/**
	 * Creates a portal from a configuration section
	 * 
	 * @param plugin
	 * @param portalManager
	 * @param portalConfiguration
	 * @return the portal generated by the config section
	 */
	public static AbstractPortal buildPortal(ElytraBooster plugin, PortalManager portalManager,
			ConfigurationSection portalConfiguration) {

		// Portal id
		String id = portalConfiguration.getName();

		// IsBlockOutline
		boolean isBlock = portalConfiguration.getBoolean("isBlockOutline");

		// Portal center location
		World world = plugin.getServer().getWorld(portalConfiguration.getString("world"));
		double x = portalConfiguration.getDouble("x");
		double y = portalConfiguration.getDouble("y");
		double z = portalConfiguration.getDouble("z");
		Location center = new Location(world, x, y, z);

		// Portal axis
		char axis = portalConfiguration.getString("axis").charAt(0);

		// Portal initial velocity
		double initialVelocity = portalConfiguration.getDouble("initialVelocity");

		// Portal final velocity
		double finalVelocity = portalConfiguration.getDouble("finalVelocity");

		// Portal boost duration
		int boostDuration = portalConfiguration.getInt("boostDuration");

		// Portal Outline type
		String outlineType = portalConfiguration.getString("outlineType");

		// Portal shape
		String shape = portalConfiguration.getString("shape");

		// Portal outline measures
		String measures = portalConfiguration.getString("measures");

		// Union of portals
		List<String> portalsUnionStringList = portalConfiguration.getStringList("portalsUnion");

		List<UnionPortal> portalsUnion = new ArrayList<UnionPortal>();
		IntStream.range(0, portalsUnionStringList.size()).forEach(i -> {
			String portalString = portalsUnionStringList.get(i);
			String[] portalArray = portalString.split(":");
			String subPortalId = id + "_" + i;
			double unionX = Double.valueOf(portalArray[1]);
			double unionY = Double.valueOf(portalArray[2]);
			double unionZ = Double.valueOf(portalArray[3]);
			String unionShape = portalArray[0];
			String unionMeasures = portalArray[4];
			boolean intersecate = Boolean.valueOf(portalArray[5]);

			UnionPortal portal = buildUnionPortal(plugin, subPortalId, isBlock,
					new Location(world, unionX, unionY, unionZ), axis, initialVelocity, finalVelocity, boostDuration,
					outlineType, new ArrayList<UnionPortal>(), unionShape, unionMeasures, intersecate);
			portalsUnion.add(portal);
		});

		// Build portal
		return buildPortal(plugin, id, isBlock, center, axis, initialVelocity, finalVelocity, boostDuration,
				outlineType, portalsUnion, shape, measures);
	}

	private static AbstractPortal buildPortal(ElytraBooster plugin, String id, boolean isBlock, Location center,
			char axis, double initialVelocity, double finalVelocity, int boostDuration, String outlineType,
			List<UnionPortal> portalsUnion, String shape, String measures) {
		switch (shape) {
		case "circle":
			return new CirclePortal(plugin, id, isBlock, center, axis, initialVelocity, finalVelocity, boostDuration,
					outlineType, portalsUnion, Double.valueOf(measures));
		case "square":
			return new RectanglePortal(plugin, id, isBlock, center, axis, initialVelocity, finalVelocity, boostDuration,
					outlineType, portalsUnion, measures + ";" + measures);
		case "rectangle":
			return new RectanglePortal(plugin, id, isBlock, center, axis, initialVelocity, finalVelocity, boostDuration,
					outlineType, portalsUnion, measures);
		case "triangle":
			return new TrianglePortal(plugin, id, isBlock, center, axis, initialVelocity, finalVelocity, boostDuration,
					outlineType, portalsUnion, measures);
		}
		throw new NullPointerException("Portal creation failed, id: " + id);
	}

	private static UnionPortal buildUnionPortal(ElytraBooster plugin, String id, boolean isBlock, Location center,
			char axis, double initialVelocity, double finalVelocity, int boostDuration, String outlineType,
			List<UnionPortal> portalsUnion, String shape, String measures, boolean intersecate) {
		return new UnionPortal(plugin, id, isBlock, center, axis, initialVelocity, finalVelocity, boostDuration,
				outlineType, portalsUnion, shape, measures, intersecate);
	}
}
